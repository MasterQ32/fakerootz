
/// 
/// SDL_MessageBox flags. If supported will display warning icon, etc.
/// 
type SDL_MessageBoxFlags = enum
{
    /// error dialog 
    ERROR                 = 0x00000010,   
    
    /// warning dialog 
    WARNING               = 0x00000020,   
    
    /// informational dialog 
    INFORMATION           = 0x00000040,   
    
    /// buttons placed left to right 
    BUTTONS_LEFT_TO_RIGHT = 0x00000080,   
    
    /// buttons placed right to left 
    BUTTONS_RIGHT_TO_LEFT = 0x00000100    
};

/// 
/// Flags for SDL_MessageBoxButtonData.
/// 
type SDL_MessageBoxButtonFlags = enum
{
    /// Marks the default button when return is hit 
    RETURNKEY_DEFAULT = 0x00000001,  
    
    /// Marks the default button when escape is hit 
    ESCAPEKEY_DEFAULT = 0x00000002   
};

/// 
/// Individual button data.
/// 
type SDL_MessageBoxButtonData = struct
{
    /// ::SDL_MessageBoxButtonFlags 
    flags: u32,          

    /// User defined button id (value returned via SDL_ShowMessageBox) 
    buttonid: c_int,     

    /// The UTF-8 button text 
    text: [*:0]const c_char, 

} ;

/// 
/// RGB value used in a message box color scheme
/// 
type SDL_MessageBoxColor = struct
{
    r: u8,
    g: u8,
    b: u8,
} ;

type SDL_MessageBoxColorType = enum
{
    BACKGROUND = 0,
    TEXT = 1,
    BUTTON_BORDER = 2,
    BUTTON_BACKGROUND = 3,
    BUTTON_SELECTED = 4,
    MAX = 5,
};

/// 
/// A set of colors to use for message box dialogs
/// 
type SDL_MessageBoxColorScheme = struct
{
    colors: [5]SDL_MessageBoxColor, // TODO: Is SDL_MessageBoxColorType.MAX
};

/// 
/// MessageBox structure containing title, text, window, etc.
/// 
type SDL_MessageBoxData = struct
{
    ///< ::SDL_MessageBoxFlags 
    flags: u32 ,                 
    
    ///< Parent window, can be NULL 
    window: ?*SDL_Window,        
    
    ///< UTF-8 title 
    title: [*:0]const c_char,    
    
    ///< UTF-8 message text 
    message: [*:0]const c_char,  

    numbuttons: c_int ,
    buttons: [*]const SDL_MessageBoxButtonData,

    /// ::SDL_MessageBoxColorScheme, can be NULL to use system settings 
    colorScheme: ?* const SDL_MessageBoxColorScheme,   
};

/// 
/// Create a modal message box.
/// 
/// If your needs aren't complex, it might be easier to use
/// SDL_ShowSimpleMessageBox.
/// 
/// This function should be called on the thread that created the parent
/// window, or on the main thread if the messagebox has no parent. It will
/// block execution of that thread until the user clicks a button or closes the
/// messagebox.
/// 
/// This function may be called at any time, even before SDL_Init(). This makes
/// it useful for reporting errors like a failure to create a renderer or
/// OpenGL context.
/// 
/// On X11, SDL rolls its own dialog box with X11 primitives instead of a
/// formal toolkit like GTK+ or Qt.
/// 
/// Note that if SDL_Init() would fail because there isn't any available video
/// target, this function is likely to fail for the same reasons. If this is a
/// concern, check the return value from this function and fall back to writing
/// to stderr if you can.
/// 
/// \param messageboxdata the SDL_MessageBoxData structure with title, text and
///                       other options
/// \param buttonid the pointer to which user id of hit button should be copied
/// \returns 0 on success or a negative error code on failure; call
///          SDL_GetError() for more information.
/// 
/// \since This function is available since SDL 2.0.0.
/// 
/// \sa SDL_ShowSimpleMessageBox
/// 
fn SDL_ShowMessageBox(messageboxdata: *const SDL_MessageBoxData, buttonid: *c_int) c_int;

/// 
/// Display a simple modal message box.
/// 
/// If your needs aren't complex, this function is preferred over
/// SDL_ShowMessageBox.
/// 
/// `flags` may be any of the following:
/// 
/// - `SDL_MESSAGEBOX_ERROR`: error dialog
/// - `SDL_MESSAGEBOX_WARNING`: warning dialog
/// - `SDL_MESSAGEBOX_INFORMATION`: informational dialog
/// 
/// This function should be called on the thread that created the parent
/// window, or on the main thread if the messagebox has no parent. It will
/// block execution of that thread until the user clicks a button or closes the
/// messagebox.
/// 
/// This function may be called at any time, even before SDL_Init(). This makes
/// it useful for reporting errors like a failure to create a renderer or
/// OpenGL context.
/// 
/// On X11, SDL rolls its own dialog box with X11 primitives instead of a
/// formal toolkit like GTK+ or Qt.
/// 
/// Note that if SDL_Init() would fail because there isn't any available video
/// target, this function is likely to fail for the same reasons. If this is a
/// concern, check the return value from this function and fall back to writing
/// to stderr if you can.
/// 
/// \param flags an SDL_MessageBoxFlags value
/// \param title UTF-8 title text
/// \param message UTF-8 message text
/// \param window the parent window, or NULL for no parent
/// \returns 0 on success or a negative error code on failure; call
///          SDL_GetError() for more information.
/// 
/// \since This function is available since SDL 2.0.0.
/// 
/// \sa SDL_ShowMessageBox
/// 
fn SDL_ShowSimpleMessageBox(flags: u32, title: [*:0]const c_char, message: [*:0]const c_char, window: ?*SDL_Window) c_int;
