/// 
/// Dynamically load a shared object.
/// 
/// \param sofile a system-dependent name of the object file
/// \returns an opaque pointer to the object handle or NULL if there was an
///          error; call SDL_GetError() for more information.
/// 
/// \since This function is available since SDL 2.0.0.
/// 
/// \sa SDL_LoadFunction
/// \sa SDL_UnloadObject
/// 
fn SDL_LoadObject(sofile: [*:0]const c_char) ?*anyopaque;

/// 
/// Look up the address of the named function in a shared object.
/// 
/// This function pointer is no longer valid after calling SDL_UnloadObject().
/// 
/// This function can only look up C function names. Other languages may have
/// name mangling and intrinsic language support that varies from compiler to
/// compiler.
/// 
/// Make sure you declare your function pointers with the same calling
/// convention as the actual library function. Your code will crash
/// mysteriously if you do not do this.
/// 
/// If the requested function doesn't exist, NULL is returned.
/// 
/// \param handle a valid shared object handle returned by SDL_LoadObject()
/// \param name the name of the function to look up
/// \returns a pointer to the function or NULL if there was an error; call
///          SDL_GetError() for more information.
/// 
/// \since This function is available since SDL 2.0.0.
/// 
/// \sa SDL_LoadObject
/// \sa SDL_UnloadObject
/// 
fn SDL_LoadFunction(handle: *anyopaque, name: [*:0]const c_char) ?*anyopaque;

/// 
/// Unload a shared object from memory.
/// 
/// \param handle a valid shared object handle returned by SDL_LoadObject()
/// 
/// \since This function is available since SDL 2.0.0.
/// 
/// \sa SDL_LoadFunction
/// \sa SDL_LoadObject
/// 
fn SDL_UnloadObject(handle: *anyopaque) void;
