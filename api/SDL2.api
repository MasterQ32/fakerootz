// api version: 2.28.4

include "SDL2/assert.api";
include "SDL2/atomic.api";
include "SDL2/audio.api";
include "SDL2/bits.api";
include "SDL2/blendmode.api";
include "SDL2/clipboard.api";
include "SDL2/copying.api";
include "SDL2/cpuinfo.api";
include "SDL2/egl.api";
include "SDL2/endian.api";
include "SDL2/error.api";
include "SDL2/events.api";
include "SDL2/filesystem.api";
include "SDL2/gamecontroller.api";
include "SDL2/gesture.api";
include "SDL2/guid.api";
include "SDL2/haptic.api";
include "SDL2/hidapi.api";
include "SDL2/hints.api";
include "SDL2/joystick.api";
include "SDL2/keyboard.api";
include "SDL2/keycode.api";
include "SDL2/loadso.api";
include "SDL2/locale.api";
include "SDL2/log.api";
include "SDL2/main.api";
include "SDL2/messagebox.api";
include "SDL2/metal.api";
include "SDL2/misc.api";
include "SDL2/mouse.api";
include "SDL2/mutex.api";
include "SDL2/name.api";
include "SDL2/opengles2_gl2ext.api";
include "SDL2/opengles2_gl2.api";
include "SDL2/opengles2_gl2platform.api";
include "SDL2/opengles2.api";
include "SDL2/opengles2_khrplatform.api";
include "SDL2/opengles.api";
include "SDL2/opengl_glext.api";
include "SDL2/opengl.api";
include "SDL2/pixels.api";
include "SDL2/platform.api";
include "SDL2/power.api";
include "SDL2/quit.api";
include "SDL2/rect.api";
include "SDL2/render.api";
include "SDL2/revision.api";
include "SDL2/rwops.api";
include "SDL2/scancode.api";
include "SDL2/sensor.api";
include "SDL2/shape.api";
include "SDL2/stdinc.api";
include "SDL2/surface.api";
include "SDL2/system.api";
include "SDL2/syswm.api";
include "SDL2/thread.api";
include "SDL2/timer.api";
include "SDL2/touch.api";
include "SDL2/version.api";
include "SDL2/video.api";
include "SDL2/vulkan.api";

type SDL_bool = bool;

// /**
//  *  \name SDL_INIT_*
//  *
//  *  These are the flags which may be passed to SDL_Init().  You should
//  *  specify the subsystems which you will be using in your application.
//  */

constexpr SDL_INIT_TIMER          : u32 = 0x00000001;
constexpr SDL_INIT_AUDIO          : u32 = 0x00000010;
constexpr SDL_INIT_VIDEO          : u32 = 0x00000020;  // SDL_INIT_VIDEO implies SDL_INIT_EVENTS
constexpr SDL_INIT_JOYSTICK       : u32 = 0x00000200;  // SDL_INIT_JOYSTICK implies SDL_INIT_EVENTS
constexpr SDL_INIT_HAPTIC         : u32 = 0x00001000;
constexpr SDL_INIT_GAMECONTROLLER : u32 = 0x00002000;  // SDL_INIT_GAMECONTROLLER implies SDL_INIT_JOYSTICK
constexpr SDL_INIT_EVENTS         : u32 = 0x00004000;
constexpr SDL_INIT_SENSOR         : u32 = 0x00008000;
constexpr SDL_INIT_NOPARACHUTE    : u32 = 0x00100000;  // compatibility; this flag is ignored.

// #define SDL_INIT_EVERYTHING ( \
//                 SDL_INIT_TIMER | SDL_INIT_AUDIO | SDL_INIT_VIDEO | SDL_INIT_EVENTS | \
//                 SDL_INIT_JOYSTICK | SDL_INIT_HAPTIC | SDL_INIT_GAMECONTROLLER | SDL_INIT_SENSOR \
//             )

/// 
/// Initialize the SDL library.
///
/// SDL_Init() simply forwards to calling SDL_InitSubSystem(). Therefore, the
/// two may be used interchangeably. Though for readability of your code
/// SDL_InitSubSystem() might be preferred.
///
/// The file I/O (for example: SDL_RWFromFile) and threading (SDL_CreateThread)
/// subsystems are initialized by default. Message boxes
/// (SDL_ShowSimpleMessageBox) also attempt to work without initializing the
/// video subsystem, in hopes of being useful in showing an error dialog when
/// SDL_Init fails. You must specifically initialize other subsystems if you
/// use them in your application.
///
/// Logging (such as SDL_Log) works without initialization, too.
///
/// `flags` may be any of the following OR'd together:
///
/// - `SDL_INIT_TIMER`: timer subsystem
/// - `SDL_INIT_AUDIO`: audio subsystem
/// - `SDL_INIT_VIDEO`: video subsystem; automatically initializes the events
///   subsystem
/// - `SDL_INIT_JOYSTICK`: joystick subsystem; automatically initializes the
///   events subsystem
/// - `SDL_INIT_HAPTIC`: haptic (force feedback) subsystem
/// - `SDL_INIT_GAMECONTROLLER`: controller subsystem; automatically
///   initializes the joystick subsystem
/// - `SDL_INIT_EVENTS`: events subsystem
/// - `SDL_INIT_EVERYTHING`: all of the above subsystems
/// - `SDL_INIT_NOPARACHUTE`: compatibility; this flag is ignored
///
/// Subsystem initialization is ref-counted, you must call SDL_QuitSubSystem()
/// for each SDL_InitSubSystem() to correctly shutdown a subsystem manually (or
/// call SDL_Quit() to force shutdown). If a subsystem is already loaded then
/// this call will increase the ref-count and return.
///
/// \param flags subsystem initialization flags
/// \returns 0 on success or a negative error code on failure; call
///          SDL_GetError() for more information.
///
/// \since This function is available since SDL 2.0.0.
///
/// \sa SDL_InitSubSystem
/// \sa SDL_Quit
/// \sa SDL_SetMainReady
/// \sa SDL_WasInit
///
fn SDL_Init(flags: u32) c_int;

///
/// Compatibility function to initialize the SDL library.
///
/// In SDL2, this function and SDL_Init() are interchangeable.
///
/// \param flags any of the flags used by SDL_Init(); see SDL_Init for details.
/// \returns 0 on success or a negative error code on failure; call
///          SDL_GetError() for more information.
///
/// \since This function is available since SDL 2.0.0.
///
/// \sa SDL_Init
/// \sa SDL_Quit
/// \sa SDL_QuitSubSystem
///
fn SDL_InitSubSystem(flags: u32) c_int;

///
/// Shut down specific SDL subsystems.
///
/// If you start a subsystem using a call to that subsystem's init function
/// (for example SDL_VideoInit()) instead of SDL_Init() or SDL_InitSubSystem(),
/// SDL_QuitSubSystem() and SDL_WasInit() will not work. You will need to use
/// that subsystem's quit function (SDL_VideoQuit()) directly instead. But
/// generally, you should not be using those functions directly anyhow; use
/// SDL_Init() instead.
///
/// You still need to call SDL_Quit() even if you close all open subsystems
/// with SDL_QuitSubSystem().
///
/// \param flags any of the flags used by SDL_Init(); see SDL_Init for details.
///
/// \since This function is available since SDL 2.0.0.
///
/// \sa SDL_InitSubSystem
/// \sa SDL_Quit
///
fn SDL_QuitSubSystem(flags: u32) void;

///
/// Get a mask of the specified subsystems which are currently initialized.
///
/// \param flags any of the flags used by SDL_Init(); see SDL_Init for details.
/// \returns a mask of all initialized subsystems if `flags` is 0, otherwise it
///          returns the initialization status of the specified subsystems.
///
///          The return value does not include SDL_INIT_NOPARACHUTE.
///
/// \since This function is available since SDL 2.0.0.
///
/// \sa SDL_Init
/// \sa  SDL_InitSubSystem
/// 
fn SDL_WasInit(flags: u32) u32;

///
/// Clean up all initialized subsystems.
///
/// You should call this function even if you have already shutdown each
/// initialized subsystem with SDL_QuitSubSystem(). It is safe to call this
/// function even in the case of errors in initialization.
///
/// If you start a subsystem using a call to that subsystem's init function
/// (for example SDL_VideoInit()) instead of SDL_Init() or SDL_InitSubSystem(),
/// then you must use that subsystem's quit function (SDL_VideoQuit()) to shut
/// it down before calling SDL_Quit(). But generally, you should not be using
/// those functions directly anyhow; use SDL_Init() instead.
///
/// You can use this function with atexit() to ensure that it is run when your
/// application is shutdown, but it is not wise to do this from a library or
/// other dynamically loaded code.
///
/// \since This function is available since SDL 2.0.0.
///
/// \sa SDL_Init
/// \sa SDL_QuitSubSystem
/// 
fn SDL_Quit() void;

